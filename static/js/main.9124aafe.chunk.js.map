{"version":3,"sources":["domain/Ticket.ts","ColorModeSwitcher.tsx","utils/IdGenerator.ts","components/SubtaskList.tsx","components/TicketForm/TicketForm.tsx","domain/Sprint.ts","context/TicketContext.tsx","context/SprintContext.tsx","components/TicketForm/TicketFormModal.tsx","components/SprintForm/SprintForm.tsx","components/SprintForm/SprintFormModal.tsx","components/ControlPanel/settings.svg","components/ControlPanel/ControlPanel.tsx","components/TypeIcon/TypeIcon.tsx","components/Backlog/Backlog.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TickerType","ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","aria-label","prefix","currentIdNumber","parseInt","localStorage","getItem","console","log","setItem","toString","this","SubtaskList","subtasks","onChange","useState","newSubtaskName","setNewSubtaskName","onEdit","subtask","filter","id","spacing","map","value","name","e","target","isChecked","isCompleted","checked","alignItems","placeholder","colorScheme","IdGenerator","generate","SprintStatus","defaultTicket","type","Task","TicketForm","ticket","onSubmit","onCancel","TypeSelect","input","borderLeftRadius","isFullWidth","Story","Bugfix","validate","values","errors","initialValues","handleSubmit","p","render","meta","error","submitFailed","isInvalid","padding","mr","textAlign","mb","display","TicketContext","createContext","TicketProvider","children","JSON","parse","getTicketsFromStorage","tickets","setTickets","Provider","submitTicket","submitted","currentTickets","sprintIndex","findIndex","push","stringify","SprintContext","SprintProvider","match","useRouteMatch","undefined","activeSprintId","setLocalActiveSprintId","getSprintsFromStorage","sprint","startDate","parseDate","endDate","sprints","setSprints","handleSetSprints","setSprintsToStorage","handleSetActiveSprintId","removeItem","setActiveSprintIdToStorage","selectedSprint","find","params","setActiveSprintId","sprintId","status","InProgress","submitSprint","currentSprints","finishSprint","Finished","addTicketToSprint","ticketId","ticketsIds","TicketFormModal","isOpen","onClose","TicketFormContext","React","open","close","TicketFormProvider","disclosure","useDisclosure","onOpen","useContext","editedTicket","setEditedTicket","parentSprintId","setParentSprintId","handleClose","options","defaultSprint","v4","Date","Planned","SprintForm","startSprint","isDateDisabled","isTicketSelectorDisabled","getSprintProgressControl","commonProps","disabled","selected","customInput","readOnly","formatDate","justify","length","as","Button","includes","SprintFormModal","SprintFormContext","SprintFormProvider","editedSprintId","setEditedSprintId","_extends","Object","assign","i","arguments","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","d","SvgSettings","_ref","svgRef","title","titleId","enableBackground","viewBox","xmlns","ref","ForwardRef","ControlPanel","openSprintForm","hasNoSprints","to","isAttached","isTruncated","maxWidth","borderLeft","borderColor","width","TypeIcon","bg","Backlog","openTicketForm","displayedTickets","index","borderTopRadius","borderBottomRadius","border","borderTop","cursor","fontWeight","App","theme","basename","minH","justifySelf","path","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9124aafe.chunk.js","sourcesContent":["export enum TickerType {\n  Story = 'Story',\n  Task = 'Task',\n  Bugfix = 'Bugfix',\n}\n\nexport type Subtask = {\n  id: string;\n  name: string;\n  isCompleted: boolean;\n};\n\nexport type Ticket = {\n  name: string;\n  id: string;\n  description?: string;\n  type: TickerType;\n  subtasks?: Subtask[];\n  assignee?: string;\n  status?: string;\n};\n","import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","class IdGenerator {\r\n  prefix = 'REC';\r\n\r\n  generate() {\r\n    const currentIdNumber = parseInt(\r\n      localStorage.getItem('currentIdNumber') ?? '1'\r\n    );\r\n    console.log('this kinda generates', currentIdNumber);\r\n\r\n    localStorage.setItem('currentIdNumber', (currentIdNumber + 1).toString());\r\n    console.log('was set', (currentIdNumber + 1).toString());\r\n    console.log(currentIdNumber);\r\n    return `${this.prefix}-${currentIdNumber}`;\r\n  }\r\n}\r\n\r\nexport default new IdGenerator();\r\n","import React, { useState } from 'react';\nimport {\n  Input,\n  InputGroup,\n  InputLeftAddon,\n  Stack,\n  Button,\n  Checkbox,\n  InputRightElement,\n} from '@chakra-ui/react';\n\nimport { Subtask } from '../domain/Ticket';\nimport IdGenerator from '../utils/IdGenerator';\n\ninterface Props {\n  subtasks: Subtask[];\n  onChange(subtasks: Subtask[]): void;\n}\n\nexport const SubtaskList: React.FC<Props> = ({ subtasks, onChange }) => {\n  const [newSubtaskName, setNewSubtaskName] = useState('');\n\n  const onEdit = (subtask: Subtask) => {\n    onChange([...subtasks.filter(({ id }) => id !== subtask.id), subtask]);\n  };\n\n  const onAddNew = () => {\n    onChange([\n      ...subtasks,\n      { name: newSubtaskName, isCompleted: false, id: IdGenerator.generate() },\n    ]);\n  };\n\n  return (\n    <Stack spacing=\"2\">\n      {subtasks.map((subtask) => (\n        <InputGroup size=\"md\" key={subtask.id}>\n          <InputLeftAddon>{subtask.id}</InputLeftAddon>\n          <Input\n            value={subtask.name}\n            onChange={(e) => onEdit({ ...subtask, name: e.target.value })}\n          />\n          <InputRightElement>\n            <Checkbox\n              isChecked={subtask.isCompleted}\n              onChange={(e) =>\n                onEdit({ ...subtask, isCompleted: e.target.checked })\n              }\n            />\n          </InputRightElement>\n        </InputGroup>\n      ))}\n\n      <InputGroup size=\"md\" alignItems=\"center\">\n        <Input\n          placeholder=\"New subtask name\"\n          value={newSubtaskName}\n          onChange={(e) => setNewSubtaskName(e.target.value)}\n        />\n        <Button size=\"sm\" marginLeft={4} colorScheme=\"green\" onClick={onAddNew}>\n          Add\n        </Button>\n      </InputGroup>\n    </Stack>\n  );\n};\n","import * as React from 'react';\r\nimport { Form, Field } from 'react-final-form';\r\nimport {\r\n  Container,\r\n  Input,\r\n  Text,\r\n  InputGroup,\r\n  InputLeftAddon,\r\n  Stack,\r\n  Select,\r\n  InputRightAddon,\r\n  Textarea,\r\n  Box,\r\n  Button,\r\n} from '@chakra-ui/react';\r\n\r\nimport { SubtaskList } from '../SubtaskList';\r\nimport IdGenerator from '../../utils/IdGenerator';\r\nimport { TickerType, Ticket } from '../../domain/Ticket';\r\n\r\ninterface Props {\r\n  ticket?: Ticket;\r\n  onCancel: () => void;\r\n  onSubmit: (ticket: Ticket) => void;\r\n}\r\n\r\nconst defaultTicket: Omit<Ticket, 'id'> = {\r\n  name: '',\r\n  subtasks: [],\r\n  type: TickerType.Task,\r\n};\r\n\r\nexport const TicketForm: React.FC<Props> = ({ ticket, onSubmit, onCancel }) => {\r\n  const TypeSelect = (\r\n    <Field name=\"type\">\r\n      {({ input }) => (\r\n        <Select\r\n          size=\"lg\"\r\n          variant=\"filled\"\r\n          value={input.value}\r\n          onChange={input.onChange}\r\n          borderLeftRadius={0}\r\n          isFullWidth\r\n        >\r\n          <option value={TickerType.Task}>{TickerType.Task}</option>\r\n          <option value={TickerType.Story}>{TickerType.Story}</option>\r\n          <option value={TickerType.Bugfix}>{TickerType.Bugfix}</option>\r\n        </Select>\r\n      )}\r\n    </Field>\r\n  );\r\n\r\n  return (\r\n    <Form\r\n      onSubmit={onSubmit}\r\n      validate={(values) => {\r\n        const errors: Partial<Record<keyof Ticket, string>> = {};\r\n        if (!values.name) {\r\n          errors.name = 'Required';\r\n        }\r\n        return errors;\r\n      }}\r\n      initialValues={ticket ?? { ...defaultTicket, id: IdGenerator.generate() }}\r\n    >\r\n      {({ values, handleSubmit }) => (\r\n        <Container p=\"8\">\r\n          <Stack spacing={8}>\r\n            <Field\r\n              name=\"name\"\r\n              render={({ input, meta: { error, submitFailed } }) => (\r\n                <InputGroup size=\"lg\">\r\n                  <InputLeftAddon>{values.id}</InputLeftAddon>\r\n                  <Input\r\n                    isInvalid={submitFailed && error}\r\n                    placeholder=\"Ticket Name\"\r\n                    {...input}\r\n                  ></Input>\r\n                  <InputRightAddon padding=\"unset\">\r\n                    {TypeSelect}\r\n                  </InputRightAddon>\r\n                </InputGroup>\r\n              )}\r\n            ></Field>\r\n\r\n            <Field name=\"assignee\">\r\n              {({ input }) => (\r\n                <InputGroup alignItems=\"center\">\r\n                  <Text fontSize=\"md\" mr=\"2\">\r\n                    Assignee:\r\n                  </Text>\r\n                  <Input {...input} />\r\n                </InputGroup>\r\n              )}\r\n            </Field>\r\n\r\n            {values.type === TickerType.Story && (\r\n              <Box textAlign=\"left\">\r\n                <Text mb=\"2\" fontSize=\"md\">\r\n                  Subtasks:\r\n                </Text>\r\n                <Field name=\"subtasks\">\r\n                  {({ input }) => (\r\n                    <SubtaskList\r\n                      subtasks={input.value}\r\n                      onChange={input.onChange}\r\n                    />\r\n                  )}\r\n                </Field>\r\n              </Box>\r\n            )}\r\n\r\n            <Field name=\"description\">\r\n              {({ input }) => (\r\n                <Box textAlign=\"left\">\r\n                  <Text mb=\"2\" fontSize=\"md\">\r\n                    Description:\r\n                  </Text>\r\n                  <Textarea\r\n                    {...input}\r\n                    placeholder=\"Write a short comment on what's to be done.\"\r\n                  />\r\n                </Box>\r\n              )}\r\n            </Field>\r\n            <Box display=\"block\">\r\n              <Button\r\n                isFullWidth\r\n                mb=\"2\"\r\n                onClick={handleSubmit}\r\n                colorScheme=\"green\"\r\n              >\r\n                {ticket ? 'Save Changes' : 'Create New Ticket'}\r\n              </Button>\r\n              <Button isFullWidth onClick={onCancel}>\r\n                Cancel\r\n              </Button>\r\n            </Box>\r\n          </Stack>\r\n        </Container>\r\n      )}\r\n    </Form>\r\n  );\r\n};\r\n","export enum SprintStatus {\r\n  Finished = 'Finished',\r\n  InProgress = 'In Progress',\r\n  Planned = 'Planned',\r\n}\r\n\r\nexport type Sprint = {\r\n  id: string;\r\n  name: string;\r\n  startDate: Date;\r\n  endDate: Date;\r\n  status: SprintStatus;\r\n  ticketsIds: string[];\r\n};\r\n","import React, { createContext, useState } from 'react';\r\n\r\nimport { Ticket } from '../domain/Ticket';\r\n\r\ninterface ITicketContext {\r\n  tickets: Ticket[];\r\n  submitTicket(ticket: Ticket): void;\r\n}\r\n\r\ntype StorageTicket = Ticket & { startDate: string; endDate: string };\r\n\r\nexport const TicketContext = createContext<ITicketContext>(\r\n  {} as ITicketContext\r\n);\r\n\r\nconst getTicketsFromStorage = (): StorageTicket[] =>\r\n  JSON.parse(localStorage.getItem('tickets') ?? '[]');\r\n\r\nexport const TicketProvider: React.FC = ({ children }) => {\r\n  const [tickets, setTickets] = useState<Ticket[]>(getTicketsFromStorage());\r\n\r\n  const submitTicket = (submitted: Ticket) => {\r\n    const currentTickets: Ticket[] = JSON.parse(\r\n      localStorage.getItem('tickets') ?? '[]'\r\n    );\r\n\r\n    const sprintIndex = currentTickets.findIndex(\r\n      ({ id }) => id === submitted.id\r\n    );\r\n\r\n    if (sprintIndex !== -1) {\r\n      currentTickets[sprintIndex] = submitted;\r\n    } else {\r\n      currentTickets.push({ ...submitted });\r\n    }\r\n\r\n    localStorage.setItem('tickets', JSON.stringify(currentTickets));\r\n    setTickets(currentTickets);\r\n  };\r\n\r\n  return (\r\n    <TicketContext.Provider\r\n      value={{\r\n        tickets,\r\n        submitTicket,\r\n      }}\r\n    >\r\n      {children}\r\n    </TicketContext.Provider>\r\n  );\r\n};\r\n","import React, { createContext, useState } from 'react';\r\nimport { useRouteMatch } from 'react-router-dom';\r\nimport parseDate from 'date-fns/parseISO';\r\n\r\nimport { Sprint, SprintStatus } from '../domain/Sprint';\r\nimport { SprintParams } from '../domain/Router';\r\n\r\ninterface ISprintContext {\r\n  sprints: Sprint[];\r\n  activeSprintId?: string;\r\n  setActiveSprintId(id?: string): void;\r\n  finishSprint(id: string): void;\r\n  selectedSprint?: Sprint;\r\n  submitSprint(sprint: Sprint): void;\r\n  addTicketToSprint(sprintId: string, ticketId: string): void;\r\n}\r\n\r\ntype StorageSprint = Sprint & { startDate: string; endDate: string };\r\n\r\nexport const SprintContext = createContext<ISprintContext>(\r\n  {} as ISprintContext\r\n);\r\n\r\nconst getSprintsFromStorage = (): StorageSprint[] =>\r\n  JSON.parse(localStorage.getItem('sprints') ?? '[]');\r\n\r\nconst setSprintsToStorage = (sprints: Sprint[]) =>\r\n  localStorage.setItem('sprints', JSON.stringify(sprints));\r\n\r\nconst getActiveSprintIdFromStorage = (): string | undefined =>\r\n  localStorage.getItem('activeSprintId') || undefined;\r\n\r\nconst setActiveSprintIdToStorage = (id?: string) => {\r\n  if (!id) {\r\n    localStorage.removeItem('activeSprintId');\r\n    return;\r\n  }\r\n  localStorage.setItem('activeSprintId', id);\r\n};\r\n\r\nexport const SprintProvider: React.FC = ({ children }) => {\r\n  const match = useRouteMatch<SprintParams>('/sprint/:id');\r\n  const [activeSprintId, setLocalActiveSprintId] = useState(\r\n    getActiveSprintIdFromStorage()\r\n  );\r\n  const [sprints, setSprints] = useState<Sprint[]>(\r\n    getSprintsFromStorage().map((sprint) => ({\r\n      ...sprint,\r\n      startDate: parseDate(sprint.startDate),\r\n      endDate: parseDate(sprint.endDate),\r\n    }))\r\n  );\r\n\r\n  const handleSetSprints = (sprints: Sprint[]) => {\r\n    setSprints(sprints);\r\n    setSprintsToStorage(sprints);\r\n  };\r\n\r\n  const handleSetActiveSprintId = (id?: string) => {\r\n    setActiveSprintIdToStorage(id);\r\n    setLocalActiveSprintId(id);\r\n  };\r\n\r\n  const selectedSprint = sprints.find(({ id }) => id === match?.params.id);\r\n\r\n  const submitSprint: ISprintContext['submitSprint'] = (submitted) => {\r\n    const currentSprints: Sprint[] = JSON.parse(\r\n      localStorage.getItem('sprints') ?? '[]'\r\n    );\r\n\r\n    const sprintIndex = currentSprints.findIndex(\r\n      ({ id }) => id === submitted.id\r\n    );\r\n\r\n    if (sprintIndex !== -1) {\r\n      currentSprints[sprintIndex] = submitted;\r\n    } else {\r\n      currentSprints.push({ ...submitted });\r\n    }\r\n\r\n    handleSetSprints(currentSprints);\r\n  };\r\n\r\n  const setActiveSprintId: ISprintContext['setActiveSprintId'] = (sprintId) => {\r\n    if (sprintId && activeSprintId) {\r\n      // add logs\r\n      return;\r\n    }\r\n    handleSetActiveSprintId(sprintId);\r\n    if (sprintId) {\r\n      handleSetSprints(\r\n        sprints.map((sprint) => {\r\n          if (sprint.id === sprintId) {\r\n            return { ...sprint, status: SprintStatus.InProgress };\r\n          }\r\n          return sprint;\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const finishSprint: ISprintContext['finishSprint'] = (sprintId) => {\r\n    setActiveSprintId(undefined);\r\n\r\n    handleSetSprints(\r\n      sprints.map((sprint) => {\r\n        if (sprint.id === sprintId) {\r\n          return { ...sprint, status: SprintStatus.Finished };\r\n        }\r\n        return sprint;\r\n      })\r\n    );\r\n  };\r\n\r\n  const addTicketToSprint: ISprintContext['addTicketToSprint'] = (\r\n    sprintId,\r\n    ticketId\r\n  ) => {\r\n    handleSetSprints(\r\n      sprints.map((sprint) => {\r\n        if (sprint.id === sprintId) {\r\n          return { ...sprint, ticketsIds: [...sprint.ticketsIds, ticketId] };\r\n        }\r\n        return sprint;\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <SprintContext.Provider\r\n      value={{\r\n        sprints,\r\n        submitSprint,\r\n        selectedSprint,\r\n        setActiveSprintId,\r\n        activeSprintId,\r\n        finishSprint,\r\n        addTicketToSprint,\r\n      }}\r\n    >\r\n      {children}\r\n    </SprintContext.Provider>\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport {\r\n  Modal,\r\n  ModalContent,\r\n  ModalOverlay,\r\n  useDisclosure,\r\n} from '@chakra-ui/react';\r\nimport { TicketForm } from './TicketForm';\r\nimport { Ticket } from '../../domain/Ticket';\r\nimport { useContext, useState } from 'react';\r\nimport { TicketContext } from '../../context/TicketContext';\r\nimport { SprintContext } from '../../context/SprintContext';\r\n\r\ninterface ITicketFormContext {\r\n  close(): void;\r\n  open(options?: { ticket?: Ticket; parentSprintId?: string }): void;\r\n}\r\n\r\ninterface TicketFormModalProps {\r\n  isOpen: boolean;\r\n  ticket?: Ticket;\r\n  onSubmit(ticket: Ticket): void;\r\n  onClose(): void;\r\n  onOpen(): void;\r\n}\r\n\r\nexport const TicketFormModal: React.FC<TicketFormModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  ticket,\r\n  onSubmit,\r\n}) => {\r\n  return (\r\n    <Modal size=\"xl\" isOpen={isOpen} onClose={onClose}>\r\n      <ModalOverlay />\r\n      <ModalContent size=\"full\">\r\n        <TicketForm ticket={ticket} onCancel={onClose} onSubmit={onSubmit} />\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport const TicketFormContext = React.createContext<ITicketFormContext>({\r\n  open: () => null,\r\n  close: () => null,\r\n});\r\n\r\nexport const TicketFormProvider: React.FC = ({ children }) => {\r\n  const disclosure = useDisclosure();\r\n  const { onClose, onOpen } = disclosure;\r\n  const { submitTicket } = useContext(TicketContext);\r\n  const { addTicketToSprint } = useContext(SprintContext);\r\n  const [editedTicket, setEditedTicket] = useState<Ticket>();\r\n  const [parentSprintId, setParentSprintId] = useState<string>();\r\n\r\n  const open: ITicketFormContext['open'] = (options = {}) => {\r\n    setEditedTicket(options.ticket);\r\n    setParentSprintId(options.parentSprintId);\r\n    onOpen();\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setEditedTicket(undefined);\r\n    setParentSprintId(undefined);\r\n    onClose();\r\n  };\r\n\r\n  const onSubmit = (ticket: Ticket) => {\r\n    submitTicket(ticket);\r\n    if (parentSprintId) {\r\n      addTicketToSprint(parentSprintId, ticket.id);\r\n    }\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <TicketFormContext.Provider value={{ open, close: handleClose }}>\r\n      {children}\r\n      <TicketFormModal\r\n        onSubmit={onSubmit}\r\n        ticket={editedTicket}\r\n        {...disclosure}\r\n      ></TicketFormModal>\r\n    </TicketFormContext.Provider>\r\n  );\r\n};\r\n","import React, { ReactNode, useContext } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  ButtonProps,\r\n  Container,\r\n  Flex,\r\n  Input,\r\n  InputGroup,\r\n  InputLeftAddon,\r\n  InputRightAddon,\r\n  Menu,\r\n  MenuButton,\r\n  MenuItem,\r\n  MenuList,\r\n  Stack,\r\n  Tag,\r\n  TagCloseButton,\r\n  Text,\r\n  Wrap,\r\n} from '@chakra-ui/react';\r\nimport { Field, Form } from 'react-final-form';\r\nimport DatePicker from 'react-datepicker';\r\nimport { v4 } from 'uuid';\r\nimport formatDate from 'date-fns/format';\r\n\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nimport { Sprint, SprintStatus } from '../../domain/Sprint';\r\nimport { TicketContext } from '../../context/TicketContext';\r\n\r\nexport interface SprintFormProps {\r\n  sprint?: Sprint;\r\n  onSubmit(sprint: Sprint): void;\r\n  startSprint(id: string): void;\r\n  finishSprint(id: string): void;\r\n  onCancel(): void;\r\n}\r\n\r\nconst defaultSprint: Sprint = {\r\n  id: v4(),\r\n  name: '',\r\n  startDate: new Date(),\r\n  endDate: new Date(),\r\n  status: SprintStatus.Planned,\r\n  ticketsIds: [],\r\n};\r\n\r\nexport const SprintForm: React.FC<SprintFormProps> = ({\r\n  sprint,\r\n  onSubmit,\r\n  onCancel,\r\n  startSprint,\r\n  finishSprint,\r\n}) => {\r\n  const { tickets } = useContext(TicketContext);\r\n\r\n  const isDateDisabled = sprint && sprint.status === SprintStatus.Finished;\r\n  const isTicketSelectorDisabled =\r\n    sprint && sprint.status !== SprintStatus.Planned;\r\n\r\n  const getSprintProgressControl = (): ReactNode => {\r\n    const commonProps: ButtonProps = {\r\n      size: 'lg',\r\n      borderLeftRadius: 'none',\r\n    };\r\n\r\n    if (!sprint) {\r\n      return null;\r\n    }\r\n\r\n    const { status, id } = sprint;\r\n\r\n    switch (status) {\r\n      case SprintStatus.Planned:\r\n        return (\r\n          <Button\r\n            {...commonProps}\r\n            colorScheme=\"green\"\r\n            onClick={() => startSprint(id)}\r\n          >\r\n            Start\r\n          </Button>\r\n        );\r\n      case SprintStatus.InProgress:\r\n        return (\r\n          <Button\r\n            {...commonProps}\r\n            colorScheme=\"blue\"\r\n            onClick={() => finishSprint(id)}\r\n          >\r\n            Finish\r\n          </Button>\r\n        );\r\n      case SprintStatus.Finished:\r\n        return <Text p=\"2\">Sprint finished</Text>;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      onSubmit={onSubmit}\r\n      initialValues={sprint ?? defaultSprint}\r\n      validate={(values) => {\r\n        const errors: Partial<Record<keyof Sprint, string>> = {};\r\n        if (!values.name) {\r\n          errors.name = 'Required';\r\n        }\r\n        if (!values.startDate) {\r\n          errors.startDate = 'Required';\r\n        }\r\n        if (!values.startDate) {\r\n          errors.startDate = 'Required';\r\n        }\r\n        return errors;\r\n      }}\r\n    >\r\n      {({ handleSubmit }) => (\r\n        <Container p=\"8\">\r\n          <Stack spacing={8}>\r\n            <Field\r\n              name=\"name\"\r\n              render={({ input, meta: { error, submitFailed } }) => (\r\n                <InputGroup size=\"lg\">\r\n                  <Input\r\n                    isInvalid={submitFailed && error}\r\n                    placeholder=\"Sprint Name\"\r\n                    {...input}\r\n                  ></Input>\r\n                  {sprint && (\r\n                    <InputRightAddon padding=\"unset\">\r\n                      {getSprintProgressControl()}\r\n                    </InputRightAddon>\r\n                  )}\r\n                </InputGroup>\r\n              )}\r\n            ></Field>\r\n\r\n            <Flex>\r\n              <Box mr=\"4\">\r\n                <Field<Sprint['startDate']> name=\"startDate\">\r\n                  {({ input }) => (\r\n                    <DatePicker\r\n                      disabled={isDateDisabled}\r\n                      onChange={input.onChange}\r\n                      selected={input.value}\r\n                      customInput={\r\n                        <InputGroup>\r\n                          <InputLeftAddon>Start date</InputLeftAddon>\r\n                          <Input\r\n                            disabled={isDateDisabled}\r\n                            readOnly\r\n                            value={formatDate(input.value, 'dd/MM/yyyy')}\r\n                          />\r\n                        </InputGroup>\r\n                      }\r\n                    ></DatePicker>\r\n                  )}\r\n                </Field>\r\n              </Box>\r\n              <Field<Sprint['endDate']> name=\"endDate\">\r\n                {({ input }) => (\r\n                  <DatePicker\r\n                    disabled={isDateDisabled}\r\n                    onChange={input.onChange}\r\n                    selected={input.value}\r\n                    customInput={\r\n                      <InputGroup>\r\n                        <InputLeftAddon>End date</InputLeftAddon>\r\n                        <Input\r\n                          disabled={isDateDisabled}\r\n                          readOnly\r\n                          value={formatDate(input.value, 'dd/MM/yyyy')}\r\n                        />\r\n                      </InputGroup>\r\n                    }\r\n                  ></DatePicker>\r\n                )}\r\n              </Field>\r\n            </Flex>\r\n\r\n            {!isTicketSelectorDisabled && (\r\n              <Field<Sprint['ticketsIds']> name=\"ticketsIds\">\r\n                {({ input }) => (\r\n                  <Box>\r\n                    <Wrap justify={input.value.length ? 'start' : 'center'}>\r\n                      <Menu>\r\n                        <MenuButton size=\"sm\" variant=\"outline\" as={Button}>\r\n                          Add tickets\r\n                        </MenuButton>\r\n                        <MenuList>\r\n                          {tickets\r\n                            .filter(({ id }) => !input.value.includes(id))\r\n                            .map(({ id: ticketId }) => (\r\n                              <MenuItem\r\n                                key={ticketId}\r\n                                onClick={() => {\r\n                                  input.onChange([...input.value, ticketId]);\r\n                                }}\r\n                              >\r\n                                {ticketId}:&nbsp;\r\n                                {\r\n                                  tickets.find(({ id }) => ticketId === id)\r\n                                    ?.name\r\n                                }\r\n                              </MenuItem>\r\n                            ))}\r\n                        </MenuList>\r\n                      </Menu>\r\n                      {input.value.map((ticketId) => (\r\n                        <Tag key={ticketId}>\r\n                          {ticketId}\r\n                          <TagCloseButton\r\n                            onClick={() =>\r\n                              input.onChange(\r\n                                input.value.filter((id) => id !== ticketId)\r\n                              )\r\n                            }\r\n                          />\r\n                        </Tag>\r\n                      ))}\r\n                    </Wrap>\r\n                  </Box>\r\n                )}\r\n              </Field>\r\n            )}\r\n\r\n            <Box display=\"block\">\r\n              <Button\r\n                isFullWidth\r\n                mb=\"2\"\r\n                onClick={handleSubmit}\r\n                colorScheme=\"green\"\r\n              >\r\n                {sprint ? 'Save Changes' : 'Create New Ticket'}\r\n              </Button>\r\n              <Button isFullWidth onClick={onCancel}>\r\n                Cancel\r\n              </Button>\r\n            </Box>\r\n          </Stack>\r\n        </Container>\r\n      )}\r\n    </Form>\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport {\r\n  Modal,\r\n  ModalContent,\r\n  ModalOverlay,\r\n  useDisclosure,\r\n} from '@chakra-ui/react';\r\nimport { SprintFormProps, SprintForm } from './SprintForm';\r\nimport { Sprint } from '../../domain/Sprint';\r\nimport { useContext, useState } from 'react';\r\nimport { SprintContext } from '../../context/SprintContext';\r\n\r\ninterface ISprintFormContext {\r\n  close(): void;\r\n  open(Sprint?: string): void;\r\n}\r\n\r\ninterface SprintFormModalProps extends SprintFormProps {\r\n  isOpen: boolean;\r\n  onClose(): void;\r\n  onOpen(): void;\r\n}\r\n\r\nexport const SprintFormModal: React.FC<SprintFormModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  onSubmit,\r\n  sprint,\r\n  startSprint,\r\n  finishSprint,\r\n}) => {\r\n  return (\r\n    <Modal size=\"xl\" isOpen={isOpen} onClose={onClose}>\r\n      <ModalOverlay />\r\n      <ModalContent size=\"full\">\r\n        <SprintForm\r\n          startSprint={startSprint}\r\n          finishSprint={finishSprint}\r\n          sprint={sprint}\r\n          onCancel={onClose}\r\n          onSubmit={onSubmit}\r\n        />\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport const SprintFormContext = React.createContext<ISprintFormContext>({\r\n  open: () => null,\r\n  close: () => null,\r\n});\r\n\r\nexport const SprintFormProvider: React.FC = ({ children }) => {\r\n  const disclosure = useDisclosure();\r\n  const { onClose, onOpen } = disclosure;\r\n  const { submitSprint, setActiveSprintId, finishSprint, sprints } = useContext(\r\n    SprintContext\r\n  );\r\n  const [editedSprintId, setEditedSprintId] = useState<string>();\r\n\r\n  const open = (sprintId?: string) => {\r\n    setEditedSprintId(sprintId);\r\n    onOpen();\r\n  };\r\n\r\n  const onSubmit = (sprint: Sprint) => {\r\n    submitSprint(sprint);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <SprintFormContext.Provider value={{ open, close: onClose }}>\r\n      {children}\r\n      <SprintFormModal\r\n        onSubmit={onSubmit}\r\n        startSprint={setActiveSprintId}\r\n        finishSprint={finishSprint}\r\n        sprint={sprints.find(({ id }) => id === editedSprintId)}\r\n        onCancel={onClose}\r\n        {...disclosure}\r\n      ></SprintFormModal>\r\n    </SprintFormContext.Provider>\r\n  );\r\n};\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"m272.066 512h-32.133c-25.989 0-47.134-21.144-47.134-47.133v-10.871c-11.049-3.53-21.784-7.986-32.097-13.323l-7.704 7.704c-18.659 18.682-48.548 18.134-66.665-.007l-22.711-22.71c-18.149-18.129-18.671-48.008.006-66.665l7.698-7.698c-5.337-10.313-9.792-21.046-13.323-32.097h-10.87c-25.988 0-47.133-21.144-47.133-47.133v-32.134c0-25.989 21.145-47.133 47.134-47.133h10.87c3.531-11.05 7.986-21.784 13.323-32.097l-7.704-7.703c-18.666-18.646-18.151-48.528.006-66.665l22.713-22.712c18.159-18.184 48.041-18.638 66.664.006l7.697 7.697c10.313-5.336 21.048-9.792 32.097-13.323v-10.87c0-25.989 21.144-47.133 47.134-47.133h32.133c25.989 0 47.133 21.144 47.133 47.133v10.871c11.049 3.53 21.784 7.986 32.097 13.323l7.704-7.704c18.659-18.682 48.548-18.134 66.665.007l22.711 22.71c18.149 18.129 18.671 48.008-.006 66.665l-7.698 7.698c5.337 10.313 9.792 21.046 13.323 32.097h10.87c25.989 0 47.134 21.144 47.134 47.133v32.134c0 25.989-21.145 47.133-47.134 47.133h-10.87c-3.531 11.05-7.986 21.784-13.323 32.097l7.704 7.704c18.666 18.646 18.151 48.528-.006 66.665l-22.713 22.712c-18.159 18.184-48.041 18.638-66.664-.006l-7.697-7.697c-10.313 5.336-21.048 9.792-32.097 13.323v10.871c0 25.987-21.144 47.131-47.134 47.131zm-106.349-102.83c14.327 8.473 29.747 14.874 45.831 19.025 6.624 1.709 11.252 7.683 11.252 14.524v22.148c0 9.447 7.687 17.133 17.134 17.133h32.133c9.447 0 17.134-7.686 17.134-17.133v-22.148c0-6.841 4.628-12.815 11.252-14.524 16.084-4.151 31.504-10.552 45.831-19.025 5.895-3.486 13.4-2.538 18.243 2.305l15.688 15.689c6.764 6.772 17.626 6.615 24.224.007l22.727-22.726c6.582-6.574 6.802-17.438.006-24.225l-15.695-15.695c-4.842-4.842-5.79-12.348-2.305-18.242 8.473-14.326 14.873-29.746 19.024-45.831 1.71-6.624 7.684-11.251 14.524-11.251h22.147c9.447 0 17.134-7.686 17.134-17.133v-32.134c0-9.447-7.687-17.133-17.134-17.133h-22.147c-6.841 0-12.814-4.628-14.524-11.251-4.151-16.085-10.552-31.505-19.024-45.831-3.485-5.894-2.537-13.4 2.305-18.242l15.689-15.689c6.782-6.774 6.605-17.634.006-24.225l-22.725-22.725c-6.587-6.596-17.451-6.789-24.225-.006l-15.694 15.695c-4.842 4.843-12.35 5.791-18.243 2.305-14.327-8.473-29.747-14.874-45.831-19.025-6.624-1.709-11.252-7.683-11.252-14.524v-22.15c0-9.447-7.687-17.133-17.134-17.133h-32.133c-9.447 0-17.134 7.686-17.134 17.133v22.148c0 6.841-4.628 12.815-11.252 14.524-16.084 4.151-31.504 10.552-45.831 19.025-5.896 3.485-13.401 2.537-18.243-2.305l-15.688-15.689c-6.764-6.772-17.627-6.615-24.224-.007l-22.727 22.726c-6.582 6.574-6.802 17.437-.006 24.225l15.695 15.695c4.842 4.842 5.79 12.348 2.305 18.242-8.473 14.326-14.873 29.746-19.024 45.831-1.71 6.624-7.684 11.251-14.524 11.251h-22.148c-9.447.001-17.134 7.687-17.134 17.134v32.134c0 9.447 7.687 17.133 17.134 17.133h22.147c6.841 0 12.814 4.628 14.524 11.251 4.151 16.085 10.552 31.505 19.024 45.831 3.485 5.894 2.537 13.4-2.305 18.242l-15.689 15.689c-6.782 6.774-6.605 17.634-.006 24.225l22.725 22.725c6.587 6.596 17.451 6.789 24.225.006l15.694-15.695c3.568-3.567 10.991-6.594 18.244-2.304z\"\n});\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"m256 367.4c-61.427 0-111.4-49.974-111.4-111.4s49.973-111.4 111.4-111.4 111.4 49.974 111.4 111.4-49.973 111.4-111.4 111.4zm0-192.8c-44.885 0-81.4 36.516-81.4 81.4s36.516 81.4 81.4 81.4 81.4-36.516 81.4-81.4-36.515-81.4-81.4-81.4z\"\n});\n\nfunction SvgSettings(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    enableBackground: \"new 0 0 512 512\",\n    viewBox: \"0 0 512 512\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSettings);\nexport default __webpack_public_path__ + \"static/media/settings.87ba233a.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useContext } from 'react';\r\nimport { HStack, Spacer } from '@chakra-ui/layout';\r\n\r\nimport { SprintFormContext } from '../SprintForm';\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  Menu,\r\n  MenuButton,\r\n  MenuItem,\r\n  Text,\r\n  MenuList,\r\n} from '@chakra-ui/react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { ReactComponent as SettingsIcon } from './settings.svg';\r\n\r\nimport { SprintContext } from '../../context/SprintContext';\r\n\r\ninterface Props {}\r\n\r\nexport const ControlPanel: React.FC<Props> = () => {\r\n  const { selectedSprint, sprints, activeSprintId } = useContext(SprintContext);\r\n  const { open: openSprintForm } = useContext(SprintFormContext);\r\n  const hasNoSprints = sprints.length === 0;\r\n\r\n  return (\r\n    <HStack mb=\"4\">\r\n      <NavLink to=\"/backlog\">\r\n        <Button>Backlog</Button>\r\n      </NavLink>\r\n      {activeSprintId && (\r\n        <NavLink to={`/sprint/${activeSprintId}`}>\r\n          <Button disabled={hasNoSprints}>Active sprint</Button>\r\n        </NavLink>\r\n      )}\r\n      <ButtonGroup isAttached>\r\n        <Menu>\r\n          <MenuButton as={Button} disabled={hasNoSprints}>\r\n            <Text isTruncated maxWidth=\"3xs\">\r\n              {selectedSprint ? selectedSprint.name : 'Select a Sprint'}\r\n            </Text>\r\n          </MenuButton>\r\n          <MenuList maxWidth=\"3xs\">\r\n            {sprints.map((sprint) => (\r\n              <NavLink key={sprint.id} to={`/sprint/${sprint.id}`}>\r\n                <MenuItem key={sprint.id}>\r\n                  <Text isTruncated maxWidth=\"3xs\">\r\n                    {sprint.name}\r\n                  </Text>\r\n                </MenuItem>\r\n              </NavLink>\r\n            ))}\r\n          </MenuList>\r\n        </Menu>\r\n        <Button\r\n          borderLeft=\"1px solid\"\r\n          borderColor=\"gray.300\"\r\n          onClick={() => openSprintForm(selectedSprint?.id)}\r\n          disabled={hasNoSprints || !selectedSprint}\r\n        >\r\n          <SettingsIcon width=\"24px\" />\r\n        </Button>\r\n      </ButtonGroup>\r\n\r\n      <Spacer />\r\n      <Button onClick={() => openSprintForm()}>Add new sprint</Button>\r\n    </HStack>\r\n  );\r\n};\r\n","import { Badge } from '@chakra-ui/layout';\nimport * as React from 'react';\nimport { TickerType } from '../../domain/Ticket';\n\ninterface Props {\n  type: TickerType;\n}\n\nexport const TypeIcon: React.FC<Props> = ({ type }) => {\n  switch (type) {\n    case TickerType.Task:\n      return (\n        <Badge fontSize=\"medium\" bg=\"blue.300\">\n          {TickerType.Task}\n        </Badge>\n      );\n    case TickerType.Story:\n      return (\n        <Badge fontSize=\"medium\" bg=\"green.300\">\n          {TickerType.Story}\n        </Badge>\n      );\n    case TickerType.Bugfix:\n      return (\n        <Badge fontSize=\"medium\" bg=\"red.300\">\n          {TickerType.Bugfix}\n        </Badge>\n      );\n  }\n};\n","import * as React from 'react';\r\nimport { Badge, HStack, Text, Spacer, Button, Box } from '@chakra-ui/react';\r\n\r\nimport { TypeIcon } from '../TypeIcon';\r\nimport { useContext } from 'react';\r\nimport { TicketFormContext } from '../TicketForm';\r\nimport { TicketContext } from '../../context/TicketContext';\r\nimport { SprintContext } from '../../context/SprintContext';\r\nimport { SprintStatus } from '../../domain/Sprint';\r\n\r\nexport const Backlog: React.FC = () => {\r\n  const { tickets } = useContext(TicketContext);\r\n  const { selectedSprint } = useContext(SprintContext);\r\n  const { open: openTicketForm } = useContext(TicketFormContext);\r\n\r\n  const displayedTickets = selectedSprint\r\n    ? tickets.filter((ticket) => selectedSprint.ticketsIds.includes(ticket.id))\r\n    : tickets;\r\n\r\n  return (\r\n    <>\r\n      <Box mb=\"4\">\r\n        {displayedTickets.length ? (\r\n          displayedTickets.map((ticket, index) => (\r\n            <HStack\r\n              padding=\"2\"\r\n              key={ticket.id}\r\n              borderTopRadius={index === 0 ? 'base' : 0}\r\n              borderBottomRadius={\r\n                index === displayedTickets.length - 1 ? 'base' : 0\r\n              }\r\n              border=\"1px\"\r\n              borderTop={index === 0 ? '1px' : 0}\r\n              borderColor=\"gray.500\"\r\n              cursor=\"pointer\"\r\n              onClick={() => openTicketForm({ ticket })}\r\n            >\r\n              <TypeIcon type={ticket.type} />\r\n              <Text fontSize=\"medium\" fontWeight=\"semibold\">\r\n                {ticket.name}\r\n              </Text>\r\n              <Spacer />\r\n              <Badge fontSize=\"large\">{ticket.id}</Badge>\r\n            </HStack>\r\n          ))\r\n        ) : (\r\n          <Text fontSize=\"lg\">{`No tickets ${\r\n            selectedSprint ? 'in this sprint' : 'yet'\r\n          }.`}</Text>\r\n        )}\r\n      </Box>\r\n      {(!selectedSprint || selectedSprint.status === SprintStatus.Planned) && (\r\n        <Button\r\n          isFullWidth\r\n          onClick={() =>\r\n            selectedSprint\r\n              ? openTicketForm({ parentSprintId: selectedSprint.id })\r\n              : openTicketForm()\r\n          }\r\n        >\r\n          Add new ticket\r\n        </Button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\r\nimport { ChakraProvider, Container, Grid, theme } from '@chakra-ui/react';\r\n\r\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\r\nimport { TicketFormProvider } from './components/TicketForm';\r\nimport { SprintFormProvider } from './components/SprintForm';\r\nimport { ControlPanel } from './components/ControlPanel';\r\nimport { Backlog } from './components/Backlog';\r\nimport { SprintProvider } from './context/SprintContext';\r\nimport { TicketProvider } from './context/TicketContext';\r\n\r\nexport const App = () => {\r\n  return (\r\n    <ChakraProvider theme={theme}>\r\n      {/* remove basename later */}\r\n      <BrowserRouter basename=\"/agitile-kanban\">\r\n        <SprintProvider>\r\n          <TicketProvider>\r\n            <TicketFormProvider>\r\n              <SprintFormProvider>\r\n                <Grid minH=\"100vh\">\r\n                  <ColorModeSwitcher justifySelf=\"flex-end\" />\r\n                  <Container textAlign=\"center\" fontSize=\"xl\">\r\n                    <ControlPanel />\r\n                    <Switch>\r\n                      <Route path=\"/sprint/:id\">\r\n                        <Backlog />\r\n                      </Route>\r\n                      <Route path=\"/backlog\">\r\n                        <Backlog />\r\n                      </Route>\r\n                      <Redirect to=\"/backlog\" />\r\n                    </Switch>\r\n                  </Container>\r\n                </Grid>\r\n              </SprintFormProvider>\r\n            </TicketFormProvider>\r\n          </TicketProvider>\r\n        </SprintProvider>\r\n      </BrowserRouter>\r\n    </ChakraProvider>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}